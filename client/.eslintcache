[{"/root/Turnup/client/src/index.js":"1","/root/Turnup/client/src/App.js":"2","/root/Turnup/client/src/pages/NotFound.js":"3","/root/Turnup/client/src/components/Alert/Alert.js":"4","/root/Turnup/client/src/components/Attendees/Attendess.js":"5","/root/Turnup/client/src/components/Hostevent/Hostevent.js":"6","/root/Turnup/client/src/pages/Landing.js":"7","/root/Turnup/client/src/pages/Event.js":"8","/root/Turnup/client/src/pages/User.js":"9","/root/Turnup/client/src/pages/Browse.js":"10","/root/Turnup/client/src/utils/api/API.js":"11","/root/Turnup/client/src/components/Nav/Nav.js":"12","/root/Turnup/client/src/components/Signup/Signup.js":"13","/root/Turnup/client/src/components/Eventguest/Eventguest.js":"14","/root/Turnup/client/src/components/Menuitem/Menuitem.js":"15","/root/Turnup/client/src/components/Hosted/Hosted.js":"16","/root/Turnup/client/src/components/Attending/Attending.js":"17","/root/Turnup/client/src/components/Carousel/Carousel.js":"18","/root/Turnup/client/src/components/Browsecard/BrowseCard.js":"19","/root/Turnup/client/src/components/Login/index.js":"20"},{"size":199,"mtime":1642006789022,"results":"21","hashOfConfig":"22"},{"size":12872,"mtime":1642006789002,"results":"23","hashOfConfig":"22"},{"size":846,"mtime":1642006789026,"results":"24","hashOfConfig":"22"},{"size":3769,"mtime":1642006789022,"results":"25","hashOfConfig":"22"},{"size":1829,"mtime":1642006789022,"results":"26","hashOfConfig":"22"},{"size":4901,"mtime":1642006789022,"results":"27","hashOfConfig":"22"},{"size":879,"mtime":1642006789026,"results":"28","hashOfConfig":"22"},{"size":19657,"mtime":1642006789026,"results":"29","hashOfConfig":"22"},{"size":13163,"mtime":1642006789026,"results":"30","hashOfConfig":"22"},{"size":5941,"mtime":1642006789026,"results":"31","hashOfConfig":"22"},{"size":1851,"mtime":1642006789026,"results":"32","hashOfConfig":"22"},{"size":2603,"mtime":1642010047392,"results":"33","hashOfConfig":"22"},{"size":3269,"mtime":1642010047392,"results":"34","hashOfConfig":"22"},{"size":1251,"mtime":1642006789022,"results":"35","hashOfConfig":"22"},{"size":1533,"mtime":1642006789022,"results":"36","hashOfConfig":"22"},{"size":2224,"mtime":1642006789022,"results":"37","hashOfConfig":"22"},{"size":2169,"mtime":1642006789022,"results":"38","hashOfConfig":"22"},{"size":3114,"mtime":1642006789022,"results":"39","hashOfConfig":"22"},{"size":750,"mtime":1642010047392,"results":"40","hashOfConfig":"22"},{"size":942,"mtime":1642006789022,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"14auu6u",{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46"},{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49"},{"filePath":"50","messages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52"},{"filePath":"53","messages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55"},{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58"},{"filePath":"59","messages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61"},{"filePath":"62","messages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64"},{"filePath":"65","messages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67"},{"filePath":"68","messages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70"},{"filePath":"71","messages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73"},{"filePath":"74","messages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76"},{"filePath":"77","messages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79"},{"filePath":"80","messages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82"},{"filePath":"83","messages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89"},{"filePath":"90","messages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92"},{"filePath":"93","messages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"95","messages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/root/Turnup/client/src/index.js",[],"/root/Turnup/client/src/App.js",["97","98","99"],"import React, { useState, useEffect } from \"react\";\nimport { BrowserRouter as Router, Route, Switch, Redirect } from \"react-router-dom\";\nimport API from \"./utils/api/API\";\nimport Nav from \"./components/Nav/Nav\";\nimport Landing from \"./pages/Landing\";\nimport Event from \"./pages/Event\";\nimport NotFound from \"./pages/NotFound.js\";\nimport User from \"./pages/User\";\nimport Browse from \"./pages/Browse\";\nimport Signup from \"./components/Signup/Signup\";\nimport Alert from \"./components/Alert/Alert.js\";\nimport Attendees from \"./components/Attendees/Attendess.js\";\nimport Hostevent from \"./components/Hostevent/Hostevent.js\";\nimport './App.css';\n\nfunction App() {\n  const [windowSize, setwindowSize] = useState(window.innerWidth);\n  const [userName, setUserName] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [passConfirm, setPassConfirm] = useState(\"\");\n  const [showWarning, setShowWarning] = useState(\"\");\n  const [eventName, setEventName] = useState(\"\");\n  const [eventType, setEventType] = useState(\"\");\n  const [briefDetails, setBriefDetails] = useState(\"\");\n  const [details, setDetails] = useState(\"\");\n  const [mainCat, setMainCat] = useState(\"\");\n  const [subCat1, setSubCat1] = useState(\"\");\n  const [subCat2, setSubCat2] = useState(\"\");\n  const [location, setLocation] = useState(\"\");\n  const [initDate, setInitDate] = useState({});\n  const [redirect, setRedirect] = useState(null);\n  const [user, setUser] = useState({ Username: \"user\", hosting: [], attending: [] });\n  const [isLogged, setIsLogged] = useState(false);\n  const [loginInit, setLoginInit] = useState(false);\n  const [modalSignUp, setModalSignUp] = useState(false);\n  const [modalHost, setModalHost] = useState(false);\n  const [modalAttendees, setModalAttendees] = useState(false);\n  const [modalAlert, setModalAlert] = useState(false);\n  const [eventInFocus, setEventInFocus] = useState({ _id: \"\", attendees: [], menu: [], images: {} });\n  const [imageForUpload, setImageForUpload] = useState();\n  const [alertProps, setAlertProps] = useState(\"\");\n\n  const toggleSignUp = () => setModalSignUp(!modalSignUp);\n  const toggleHost = () => setModalHost(!modalHost);\n  const toggleAttendees = () => setModalAttendees(!modalAttendees);\n  const toggleAlert = () => setModalAlert(!modalAlert);\n  \n  useEffect(() => {\n    let checkLogged = sessionStorage.getItem(\"isLogged\");\n    let loadUser = sessionStorage.getItem(\"user\");\n    if (checkLogged) {\n      setIsLogged(true);\n      API.getUser(loadUser)\n        .then(res => {\n          setUser(res.data)\n        })\n        .catch(err => console.log(err));\n    };\n  }, []);\n\n  function handleSignIn() {\n    if (userName !== \"\" && password !== \"\") {\n      let userCreds = {\n        username: userName,\n        password: password\n      };\n      setUserName(\"\");\n      setPassword(\"\");\n      API.signIn(userCreds)\n        .then(user => {\n          if (user.data !== \"incorrect username\") {\n            setIsLogged(true);\n            sessionStorage.setItem(\"isLogged\", \"true\");\n            sessionStorage.setItem(\"user\", user.data._id);\n            API.getUser(user.data._id)\n              .then(res => {\n                setUser(res.data);\n                setRedirect(userName);\n                setRedirect(null);\n              })\n              .catch(err => console.log(err));\n          } else {\n            setAlertProps(\"badLogin\");\n            toggleAlert();\n          }\n        })\n        .catch(err => console.log(err));\n    }\n    else {\n      setAlertProps(\"badLogin\");\n      toggleAlert();\n    };\n  };\n\n  function uploadImage(picType) {\n    let imageFormObj = new FormData();\n    imageFormObj.append(\"imageName\", \"multer-image-\" + Date.now());\n    imageFormObj.append(\"imageData\", imageForUpload);\n\n    switch (picType) {\n      case \"profile\":\n        imageFormObj.append(\"type\", \"profile\")\n        API.postProfileImage(user._id, imageFormObj)\n          .then(data => {\n            if (data.data.success) {\n              alert(\"Image has been successfully uploaded using multer\");\n            }\n          })\n          .catch(err => {\n            alert(\"Error while uploading image using multer\");\n          });\n        break;\n      case \"banner\":\n        imageFormObj.append(\"banner\", eventInFocus.images.banner);\n        imageFormObj.append(\"thumb\", eventInFocus.images.thumb);\n        imageFormObj.append(\"type\", \"banner\");\n        API.postEventImage(eventInFocus._id, imageFormObj)\n          .then(data => {\n            if (data.data.success) {\n              alert(\"Image has been successfully uploaded using multer\");\n            }\n          })\n          .catch(err => {\n            alert(\"Error while uploading image using multer\");\n          });\n        break;\n      case \"thumb\":\n        imageFormObj.append(\"banner\", eventInFocus.images.banner);\n        imageFormObj.append(\"thumb\", eventInFocus.images.thumb);\n        imageFormObj.append(\"type\", \"thumb\");\n        API.postEventImage(eventInFocus._id, imageFormObj)\n          .then(data => {\n            if (data.data.success) {\n              alert(\"Image has been successfully uploaded using multer\");\n            }\n          })\n          .catch(err => {\n            alert(\"Error while uploading image using multer\");\n          });\n      default:\n        break;\n    };\n    window.location.reload(false);\n  };\n\n  function logOut() {\n    setIsLogged(false);\n    sessionStorage.clear();\n    window.location.href = '/';\n  };\n\n  function validateEmail(email) {\n    var re = /\\S+@\\S+\\.\\S+/;\n    return re.test(email);\n  };\n\n  function checkPassword(str) {\n    var re = /^(?=.*\\d)(?=.*[!@#$%^&*])(?=.*[a-z])(?=.*[A-Z]).{8,}$/;\n    return re.test(str);\n  };\n\n  function handleSignUpSubmit() {\n\n    if (!userName || !email || !password || !passConfirm) {\n      setShowWarning(\"Please fill out all values...\");\n      setTimeout(() => {\n        setShowWarning(\"\");\n      }, 1800);\n      return;\n    };\n\n    if (!validateEmail(email)) {\n      setShowWarning(\"Not a proper email...\");\n      setTimeout(() => {\n        setShowWarning(\"\");\n      }, 1800);\n      return;\n    };\n\n    if (!checkPassword(password)) {\n      setShowWarning(\"Try another password...\");\n      setTimeout(() => {\n        setShowWarning(\"\");\n      }, 1800);\n      return;\n    };\n\n    if (password !== passConfirm) {\n      setShowWarning(\"Passwords do not match...\");\n      setTimeout(() => {\n        setShowWarning(\"\");\n      }, 1800);\n      return;\n    };\n\n    if (userName && email && password && passConfirm) {\n      API.saveUser({\n        Username: userName,\n        email: email,\n        Password: password\n      })\n        .then(res => {\n          toggleSignUp();\n          handleSignIn();\n          setAlertProps(\"welcome\");\n          toggleAlert();\n        })\n        .catch(err => {\n          let checkErr = err.response.data.error;\n          if (checkErr.hasOwnProperty('Username')) {\n            setShowWarning(\"Username has already been taken\");\n            setTimeout(() => {\n              setShowWarning(\"\");\n            }, 1800);\n            return;\n          };\n\n          if (checkErr.hasOwnProperty('email')) {\n            setShowWarning(\"Email has already been taken\");\n            setTimeout(() => {\n              setShowWarning(\"\");\n            }, 1800);\n            return;\n          };\n        });\n    };\n  };\n\n  function deleteUser() {\n    let usersID = user._id;\n    setIsLogged(false);\n    sessionStorage.clear();\n    setUser({ Username: \"user\", hosting: [], attending: [] });\n    toggleAlert();\n    window.location.href = \"/\";\n\n    API.deleteUser(usersID)\n      .then(res => console.log(res))\n      .catch(err => console.log(err));\n  };\n\n  function handleHostFormSubmit() {\n    if (!eventName || !briefDetails || !eventType || !mainCat || !location) {\n      setShowWarning(\"Please fill out all required values...\");\n      setTimeout(() => {\n        setShowWarning(\"\");\n      }, 1800);\n      return;\n    };\n\n    let eventString = eventName.replace(/\\s/g, '').toLowerCase();\n    if (eventName && briefDetails && eventType && mainCat && location && initDate) {\n      var dateFormat = require(\"dateformat\");\n      let formattedDate = (dateFormat(initDate, \"dddd, mmmm, dS, yyyy\"));\n      API.saveEvent({\n        eventName: eventName,\n        eventString: eventString,\n        hosts: user._id,\n        attendees: { guest: user._id },\n        briefDetails: briefDetails,\n        details: details,\n        eventType: eventType,\n        category: {\n          first: mainCat,\n          second: subCat1,\n          third: subCat2\n        },\n        images: {\n          banner: \"none\",\n          thumb: \"none\"\n        },\n        location: location,\n        datesOpen: formattedDate\n      })\n        .then(res => {\n          console.log(\"successful event Post\")\n          toggleHost();\n          makeHost(eventString);\n        })\n        .catch(err => {\n          console.log(err.response);\n          let checkErr = err.response.data.error;\n          if (checkErr.hasOwnProperty('eventName')) {\n            setShowWarning(\"This even name already exists.\");\n            setTimeout(() => {\n              setShowWarning(\"\");\n            }, 1800);\n          }\n        });\n    };\n\n    function makeHost(eventString) {\n      API.getEventstring({ eventString: eventString })\n        .then(res => {\n          API.updateUser(user._id, { $push: { hosting: res.data._id } })\n          window.location.href = '/event/' + res.data.eventString;\n        })\n        .catch(err => console.log(err));\n    };\n  };\n\n  function deleteEvent() {\n    toggleAlert();\n    API.deleteEvent(eventInFocus._id)\n      .then(res => window.location.href = '/user/' + user.Username)\n      .catch(err => console.log(err));\n  }\n\n  return (\n    <div>\n      <Nav\n        user={user}\n        isLogged={isLogged}\n        logOut={logOut}\n        userName={userName}\n        password={password}\n        setUserName={setUserName}\n        setPassword={setPassword}\n        handleSignIn={handleSignIn}\n        setAlertProps={setAlertProps}\n        toggleAlert={toggleAlert}\n      />\n      <Signup\n        modalSignUp={modalSignUp}\n        toggleSignUp={toggleSignUp}\n        setUserName={setUserName}\n        setEmail={setEmail}\n        setPassword={setPassword}\n        showWarning={showWarning}\n        setPassConfirm={setPassConfirm}\n        handleSignUpSubmit={handleSignUpSubmit}\n      />\n      <Hostevent\n        modalHost={modalHost}\n        eventType={eventType}\n        mainCat={mainCat}\n        showWarning={showWarning}\n        setEventName={setEventName}\n        setEventType={setEventType}\n        setBriefDetails={setBriefDetails}\n        setDetails={setDetails}\n        setMainCat={setMainCat}\n        setSubCat1={setSubCat1}\n        setSubCat2={setSubCat2}\n        setLocation={setLocation}\n        setInitDate={setInitDate}\n        toggleHost={toggleHost}\n        handleHostFormSubmit={handleHostFormSubmit}\n      />\n      <Attendees\n        eventInFocus={eventInFocus}\n        modalAttendees={modalAttendees}\n        toggleAttendees={toggleAttendees}\n      />\n      <Alert\n        alert={alertProps}\n        modalAlert={modalAlert}\n        toggleAlert={toggleAlert}\n        deleteUser={deleteUser}\n        deleteEvent={deleteEvent}\n      />\n      <Router>\n        {redirect ? <Redirect to={{ pathname: \"/user/\" + redirect }} /> :\n          <Switch>\n            <Route exact path=\"/\">\n              <Landing\n                toggleSignUp={toggleSignUp}\n              />\n            </Route>\n            <Route exact path=\"/event/:currentEvent\">\n              <Event\n                user={user}\n                isLogged={isLogged}\n                eventInFocus={eventInFocus}\n                windowSize={windowSize}\n                setImageForUpload={setImageForUpload}\n                uploadImage={uploadImage}\n                setEventInFocus={setEventInFocus}\n                toggleAttendees={toggleAttendees}\n                toggleAlert={toggleAlert}\n                setAlertProps={setAlertProps}\n              />\n            </Route>\n            <Route exact path=\"/user/:Username\">\n              <User\n                user={user}\n                isLogged={isLogged}\n                loginInit={loginInit}\n                windowSize={windowSize}\n                setImageForUpload={setImageForUpload}\n                uploadImage={uploadImage}\n                setUser={setUser}\n                toggleHost={toggleHost}\n                setAlertProps={setAlertProps}\n                toggleAlert={toggleAlert}\n              />\n            </Route>\n            <Route exact path=\"/user/*\">\n              <NotFound />\n            </Route>\n            <Route exact path=\"/browse\">\n              <Browse />\n            </Route>\n            <Route exact path=\"*\" >\n              <NotFound />\n            </Route>\n          </Switch>\n        }\n      </Router>\n    </div>\n  );\n};\n\nexport default App;","/root/Turnup/client/src/pages/NotFound.js",["100"],"import React from \"react\";\nimport Container from 'react-bootstrap/Container'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport notFound from '../assets/notFound.png'\nimport '../App.css';\n\nfunction NotFound(props) {\n\n  return (\n    <div id=\"notFound\">\n      <Container fluid>\n        <Row className=\"justify-content-center pt-5\">\n          <Col lg={6} className=\"p-3 d-flex\" id=\"notFound\">\n              <div id=\"notFoundContent\" className=\"m-auto\">\n                <h4 id=\"notFoundText\" className=\"text-center m-auto\">\"I don't think this is what you're looking for...\"</h4>\n                <img id=\"notFoundImg\" className=\"img-fluid\" src={notFound} alt=\"image displayed for not found\"/> \n              </div>          \n          </Col>\n        </Row>\n      </Container>\n    </div>\n  );\n}\n\nexport default NotFound;","/root/Turnup/client/src/components/Alert/Alert.js",["101","102"],"import React from \"react\";\nimport \"./style.css\"\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\n\n\nfunction Alert(props) {\n\n  const {\n    buttonLabel,\n    className\n  } = props;\n\n\n  return (\n    <div>\n      <Modal id=\"signUpBody\" isOpen={props.modalAlert} toggle={props.toggleAlert} className={className}>\n        <ModalHeader toggle={props.toggleAlert}>\n          {props.alert === \"welcome\" ? <h4>Welcome!!!</h4> : \"\"}\n          {props.alert === \"about\" ? <h4>You got a pop up? We'll Turnup!</h4> : \"\"}\n          {props.alert === \"badLogin\" ? <h4>Attention!</h4> : \"\"}\n          {props.alert === \"deleteUser\" ? <h4>Oh No! We're sorry to see you go...</h4> : \"\"}\n          {props.alert === \"deleteEvent\" ? <h4>The time has come...</h4> : \"\"}\n        </ModalHeader>\n        <ModalBody>\n          {props.alert === \"welcome\" ?\n            <h6>So glad you joined us, welcome to your profile page. Feel free to update your bio and add a pic so people know who a little about you. After that feel free to browse our events and see whats going on. If something piques your interest, mark yourself attending. Or if you're here to host your own events, go for it and have your friends sign up so they can attend your event, we love seeing the community grow. Cheers! </h6>\n            : \"\"}\n          {props.alert === \"about\" ?\n            <div>\n              <h6>Hey there and welcome to Turnup, a top hub for hosting and promoting pop up events. Come on and join the community and from there you can browse, attend and even host your own pop ups. And when the date comes make sure to turn up.</h6>\n              <h6>Now that you've got the gist, please know this site is for demostration only. Although you can create a user and host/attend all the events you want, all of the data that is rendering the events is either seed or test data prodived by the developers or previous user that were instructed here to test it. There is no current intent to put this project into production, and therefore none of the events on the page should be considered to be real. </h6>\n              <h6>A note from the dev: If you are another developer here to investigate, please do so diligently. This is my first production scale MERN stack application and I have it hosted to be able to have it tested by others and get feed back. Please feel free to do so by opening up an issue in the repo <a href=\"https://github.com/baberMatt/Turnup\">@here</a>. Thanks for your time.</h6>\n            </div>\n            : \"\"}\n          {props.alert === \"badLogin\" ?\n            <div>\n              <h6>You have not entered a incorrect username and password...</h6>\n              <img className=\"img-fluid\" src=\"https://c.tenor.com/hYVsWvkpdrMAAAAC/you-didnt-say-the-magic-word-ah-ah.gif\"></img>\n            </div>\n            : \"\"}\n          {props.alert === \"deleteUser\" ?\n            <div>\n              <h6>Are you sure you want to delete your account? This decision will be permanent... however you're always welcome back to make a new account.</h6>\n              <button onClick={props.deleteUser} className=\"btn btn3 editButtons\">Delete Me!</button>\n            </div>\n            : \"\"}\n          {props.alert === \"deleteEvent\" ?\n            <div>\n              <h6>Are you sure you want to delete this event? This decision will be permanent... however you're always welcome make another event.</h6>\n              <button onClick={props.deleteEvent} className=\"btn btn3 editButtons\">Delete It!</button>\n            </div>\n            : \"\"}\n        </ModalBody>\n        <ModalFooter>\n          <Button className=\"btn btn3\" color=\"secondary\" onClick={props.toggleAlert}>Close</Button>\n        </ModalFooter>\n      </Modal>\n    </div >\n  )\n}\n\n\nexport default Alert;\n","/root/Turnup/client/src/components/Attendees/Attendess.js",["103"],"import React from \"react\";\nimport \"./style.css\"\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\nimport Eventguest from '../Eventguest/Eventguest.js'\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\n\nfunction Attendees(props) {\n  const {\n    buttonLabel,\n    className\n  } = props;\n\n  return (\n    <div>\n      <Modal id=\"attendeesBody\" isOpen={props.modalAttendees} toggle={props.toggleAttendees} className={className}>\n        <ModalHeader toggle={props.toggleAttendees}>\n          <h3>This is who is turning up for...</h3>\n          <h1>{props.eventInFocus.eventName}</h1>\n        </ModalHeader>\n        <ModalBody>\n          <Container>\n            <Row className=\"d-flex justify-content-center\">\n              <Col md={10}>\n\n                {props.eventInFocus.attendees.map(item =>\n                   item.guest.hosting === props.eventInFocus._id ? (\n                    <Eventguest\n                      eventID={props.eventInFocus._id}\n                      host={\"host\"}\n                      Username={item.guest.Username}\n                      attending={item.guest.attending}\n                    />\n                  ) : (\n                      <Eventguest\n                        eventID={props.eventInFocus._id}\n                        dates={item.dates}\n                        Username={item.guest.Username}\n                        attending={item.guest.attending}\n                      />)\n                )}\n              </Col>\n            </Row>\n          </Container>\n        </ModalBody>\n        <ModalFooter>\n          <Button className=\"btn btn3\" color=\"secondary\" onClick={props.toggleAttendees}>Close</Button>\n        </ModalFooter>\n      </Modal>\n    </div >\n  )\n}\n\nexport default Attendees;","/root/Turnup/client/src/components/Hostevent/Hostevent.js",["104","105"],"import React, { useState, useEffect } from \"react\";\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport \"./style.css\"\n\nfunction Hostevent(props) {\n    const [startDate, setStartDate] = useState(new Date())\n\n    useEffect(() => {\n        props.setInitDate(startDate)\n    }, [startDate])\n\n    const {\n        buttonLabel,\n        className\n    } = props;\n\n    function hostFormSubmit() {\n        props.handleHostFormSubmit();\n    }\n\n    return (\n\n        <div>\n\n            <Modal id=\"modalBackground\" isOpen={props.modalHost} toggle={props.toggleHost} className={className}>\n                <ModalHeader className=\"py-2\" toggle={props.toggleHost}>\n                    <h4>Gives us some details about your event.</h4>\n                    {props.showWarning ?\n                        <h5 className=\"warning pulse text-center ml-5 mb-0\">{props.showWarning}</h5>\n                        : <h6>Dont worry, you'll be able to add more info and update this info on the hosted page...</h6>\n                    }\n                </ModalHeader>\n                <ModalBody className=\"py-2\">\n                    <div className=\"d-inline-block\">\n                        <p className=\"my-0\">Event Name<span className=\"asterisk\">*</span></p>\n                        <input className=\"d-inline styleInput\" onChange={event => props.setEventName(event.target.value)} placeholder=\"Hot Fruit Pies\" />\n                        <p className=\"my-0\">Event Type<span className=\"asterisk\">*</span></p>\n                        <select className=\"mt-0 mb-2\" onChange={event => props.setEventType(event.target.value)} placeholder=\"Event Type\">\n                            <option value=\"Select One\">Select One</option>\n                            <option value=\"Pop Up\">Pop Up</option>\n                            <option value=\"Ghost Kitchen\">Ghost Kitchen</option>\n                        </select>\n                    </div>\n                    <div className=\"\">\n                        <p className=\"my-0\">Brief description for the subheader <span className=\"asterisk\">*</span></p>\n                        <textarea className=\"mt-0 mb-2\" onChange={event => props.setBriefDetails(event.target.value)} rows=\"1\" cols=\"75\" placeholder=\"A pie for every fruit\"></textarea>\n                    </div>\n                    <div className=\"\">\n                        <p className=\"my-0\">More elaborate details </p>\n                        <textarea className=\"mt-0 mb-2\" onChange={event => props.setDetails(event.target.value)} rows=\"4\" cols=\"75\" placeholder=\"A lot more info about our pies\"></textarea>\n                    </div>\n                    <div className=\"\">\n                        <p className=\"my-0\">Main Catergory<span className=\"asterisk\">*</span></p>\n                        <select className=\"mt-0 mb-2\" onChange={event => props.setMainCat(event.target.value)} placeholder=\"Main Category\">\n                            <option value=\"Select One\">Select One</option>\n                            <option value=\"Food\">Food</option>\n                            <option value=\"Maker\">Maker</option>\n                        </select>\n                        <p className=\"my-0\">Sub Catergories</p>\n                        <input className=\"my-1\" onChange={event => props.setSubCat1(event.target.value)} placeholder=\"dessert\" />\n                        <input className=\"my-1\" onChange={event => props.setSubCat2(event.target.value)} placeholder=\"handmade\" />\n                    </div>\n                    <div className=\"\">\n                        <p className=\"my-0\">Location<span className=\"asterisk\">*</span></p>\n                        <input className=\"mt-0 mb-2\" onChange={event => props.setLocation(event.target.value)} placeholder=\"314 crust st. Cleveland, OH\" />\n                    </div>\n                    <p className=\"my-0\">Intial Date<span className=\"asterisk\">*</span></p>\n                    <div className=\"d-flex my-0\">\n                        <DatePicker\n                            selected={startDate}\n                            dateFormat=\"eeee MMM dd, yyyy\"\n                            onChange={date => setStartDate(date)}\n                            selectsStart\n                            startDate={startDate}\n                        />\n                        <p className=\"text-center m-auto\">pick a date, you can add more later</p>\n                    </div>\n                </ModalBody>\n                <ModalFooter className=\"py-2\">\n                    <Button className=\"btn btn3\" color=\"primary\" onClick={hostFormSubmit}>Submit</Button>{' '}\n                    <Button className=\"btn btn3\" color=\"secondary\" onClick={props.toggleHost}>Cancel</Button>\n                </ModalFooter>\n            </Modal>\n        </div >\n    )\n}\n\n\nexport default Hostevent;\n","/root/Turnup/client/src/pages/Landing.js",["106","107","108","109","110","111"],"import React from \"react\";\nimport floatImg from '../assets/landingFloat.png'\nimport cloud1 from '../assets/cloud1.png'\nimport cloud2 from '../assets/cloud2.png'\nimport cloud3 from '../assets/cloud3.png'\nimport plane from '../assets/plane.png'\nimport '../App.css';\n\nfunction Landing(props) {\n \n  return (\n    <div id=\"landingPage d-flex\">\n      <h1 id=\"turnupTitle\" className=\"\">Turnup</h1>\n      <img id=\"float\" className=\"img-fluid \" src={floatImg} />\n      <img id=\"cloud1\" className=\"img-fluid cloud1fly \" src={cloud1} />\n      <img id=\"cloud2\" className=\"img-fluid cloud2fly\" src={cloud2} />\n      <img id=\"cloud3\" className=\"img-fluid cloud3fly\" src={cloud3} />\n      <img id=\"cloud4\" className=\"img-fluid cloud4fly\" src={cloud1} />\n      <img id=\"plane\" className=\"img-fluid planeFly\" onClick={props.toggleSignUp} src={plane} />\n    </div>\n  );\n};\n\nexport default Landing;\n","/root/Turnup/client/src/pages/Event.js",["112","113","114","115","116","117","118","119"],"import React, { useState, useEffect } from \"react\";\nimport { useParams, useHistory } from \"react-router-dom\"\nimport API from \"../utils/api/API\";\nimport Menuitem from \"../components/Menuitem/Menuitem.js\";\nimport { Modal } from \"react-bootstrap\"\nimport Container from 'react-bootstrap/Container'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport placeholder from '../assets/4short.png'\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\n\nfunction Event(props) {\n    const [editEvent, setEditEvent] = useState(false);\n    const [addDate, setAddDate] = useState(false);\n    const [eventNameUpdate, setEventNameUpdate] = useState();\n    const [eventBriefDetailsUpdate, setEventBriefDetailsUpdate] = useState();\n    const [eventLocationUpdate, setEventLocationUpdate] = useState();\n    const [eventDetailsUpdate, setEventDetailsUpdate] = useState();\n    const [datesForSubmit, setDatesForSubmit] = useState({})\n    const [userIsAttending, setUserIsAttending] = useState(false);\n    const [startDate, setStartDate] = useState(new Date());\n    const [eventAuth, setEventAuth] = useState(false);\n    const [show, setShow] = useState(false);\n\n    const handleClose = () => setShow(false);\n    const handleShow = () => setShow(true);\n\n    //  MENU OFFLINE\n    // const [addMenuItem, setAddMenuItem] = useState(false)\n    // const [menutItem, setMenuItem] = useState(\"\");\n    // const [itemDetails, setItemDetails] = useState(\"\");\n    // const [itemPrice, setItemPrice] = useState(0);\n\n    let { currentEvent } = useParams();\n\n    useEffect(() => {\n        API.getEventstring({ eventString: currentEvent }).then(res => {\n            if (!res.data) {\n                window.location.href = '/notfound';\n            }\n            props.setEventInFocus(res.data);\n            setEventNameUpdate(props.eventInFocus.eventName);\n            setEventBriefDetailsUpdate(props.eventInFocus.briefDetails);\n            setEventLocationUpdate(props.eventInFocus.location);\n            setEventDetailsUpdate(props.eventInFocus.details);\n        });\n\n    }, [currentEvent]);\n\n    useEffect(() => {\n        function checkHost(host) {\n            let checkHostArr = [];\n            props.user.hosting.map(item => checkHostArr.push(item._id));\n            if (checkHostArr.includes(host)) {\n                setEventAuth(true);\n            }\n        };\n        checkHost(props.eventInFocus._id);\n\n        function checkAttending(attending) {\n            let checkAttending = attending.map(item => { return item.event });\n            if (checkAttending.includes(props.eventInFocus._id)) {\n                setUserIsAttending(true);\n            }\n        };\n        checkAttending(props.user.attending);\n\n    }, [props.user]);\n\n    function editingEvent() {\n        if (!editEvent) {\n            setEditEvent(true);\n            setEventNameUpdate(props.eventInFocus.eventName);\n            setEventDetailsUpdate(props.eventInFocus.details);\n            setEventBriefDetailsUpdate(props.eventInFocus.briefDetails);\n            setEventLocationUpdate(props.eventInFocus.location);\n        }\n        else {\n            if (eventNameUpdate || eventBriefDetailsUpdate || eventDetailsUpdate || eventLocationUpdate) {\n                updateEvent();\n            }\n            setEventNameUpdate(\"\");\n            setEventDetailsUpdate(\"\");\n            setEventBriefDetailsUpdate(\"\");\n            setEventLocationUpdate(\"\");\n            setEditEvent(false);\n            window.location.reload(false);\n        };\n    };\n\n    function handleEventNameChange(event) {\n        setEventNameUpdate(event.target.value);\n    };\n    function handleEventBriefDetailsUpdate(event) {\n        setEventBriefDetailsUpdate(event.target.value);\n    };\n    function handleEventLocationUpdate(event) {\n        setEventLocationUpdate(event.target.value);\n    };\n    function handleEventDetailsUpdate(event) {\n        setEventDetailsUpdate(event.target.value);\n    };\n    function handleEventImgUploadChange(event) {\n        props.setImageForUpload(event.target.files[0]);\n    };\n\n    function updateEvent() {\n        API.updateEvent(props.eventInFocus._id, {\n            eventName: eventNameUpdate,\n            briefDetails: eventBriefDetailsUpdate,\n            location: eventLocationUpdate,\n            details: eventDetailsUpdate\n        })\n            .catch(err => console.log(err));\n    };\n\n\n    function addingDate() {\n        setAddDate(true);\n    };\n\n    function submitDate() {\n        var dateFormat = require(\"dateformat\");\n        let formattedDate = (dateFormat(startDate, \"dddd, mmmm, dS, yyyy\"));\n        API.updateEvent(props.eventInFocus._id, { $push: { datesOpen: formattedDate } });\n        setAddDate(false);\n        window.location.reload();\n    };\n\n    function handleAddDate(e) {\n        if (e.target.classList.contains(\"checkedBtn\")) {\n            e.target.classList.remove(\"checkedBtn\");\n            e.target.innerHTML = \"x\";\n            let dateID = e.target.getAttribute('data-numb');\n            let newDates = { ...datesForSubmit };\n            delete newDates[`${dateID}`];\n            setDatesForSubmit(newDates);\n        } else {\n            e.target.classList.add(\"checkedBtn\");\n            e.target.innerHTML = \"o\";\n            let dateID = e.target.getAttribute('data-numb');\n            let chosenDate = document.getElementById(`dateItem${dateID}`).textContent;\n            setDatesForSubmit({ ...datesForSubmit, [dateID]: chosenDate });\n        };\n    };\n\n    function handleAttending() {\n        if (!props.isLogged) {\n            alert(\"We sorry, you need to sign in to attend and event, if you don't have an account, create one from our home page\");\n        } else {\n            let dateSubmission = Object.values(datesForSubmit);\n            API.updateUser(props.user._id, { $push: { \"attending\": { event: props.eventInFocus._id, dates: dateSubmission } } });\n            API.updateEvent(props.eventInFocus._id, { $push: { \"attendees\": { guest: props.user._id, dates: dateSubmission } } });\n            alert(\"cant wait to see you there\");\n            window.location.reload();\n        }\n        handleClose();\n    };\n\n    function deleteThisEvent() {\n        props.setAlertProps(\"deleteEvent\");\n        props.toggleAlert();\n    };\n\n    // ** MENU FUNCTIONALITY OFFLINE ** \n    // \n    // function addingMenuItem() {\n    //     setAddMenuItem(true)\n    // }\n\n    // function submitMenuItem() {\n    //     API.updateEvent(props.eventInFocus._id, {\n    //         $push:\n    //         {\n    //             \"menu\":\n    //             {\n    //                 menuItem: menutItem,\n    //                 itemDetails: itemDetails,\n    //                 itemPrice: itemPrice\n\n    //             }\n    //         }\n    //     })\n    //     setAddMenuItem(false)\n    // }\n\n    function removeBannerImage() {\n        API.updateEvent(props.eventInFocus._id, {\n            images: { banner: \"none\", thumb: props.eventInFocus.images.thumb },\n        })\n            .catch(err => console.log(err))\n            .then(API.deleteEventImage(props.eventInFocus.images.banner, {}))\n        window.location.reload(false);\n    };\n\n    function removeThumbImage() {\n        API.updateEvent(props.eventInFocus._id, {\n            images: { thumb: \"none\", banner: props.eventInFocus.images.banner },\n        })\n            .catch(err => console.log(err))\n            .then(API.deleteEventImage(props.eventInFocus.images.thumb, {}))\n        window.location.reload(false);\n    };\n\n    function bailOnEvent() {\n        API.updateUser(props.user._id, { $pull: { attending: { event: props.eventInFocus._id } } })\n            .then(res => console.log(res))\n            .catch(err => console.log(err))\n            .then(API.updateEvent(props.eventInFocus._id, { $pull: { attendees: { guest: props.user._id } } }))\n            .then(res => console.log(res))\n            .catch(err => console.log(err))\n        window.location.reload(false);\n    };\n\n    return (\n        <div id=\"event\" className=\"d-flex justify-content-center\">\n            <Container fluid>\n                <div className=\"shadowEvent eventMain\">\n                    <Row className=\"mt-3 headerContent mx-0   eventContent d-flex justify-content-center\">\n                        <Col md={12} id=\"bannerCol\" className=\"d-flex p-0 justify-content-center\">\n                            {props.eventInFocus.images.banner !== \"none\" ? <img id=\"bannerImage\" src={'../../../uploads/eventImage/' + props.eventInFocus.images.banner} /> : <img id=\"bannerImage\" src={placeholder} />}\n                            <div id=\"bannerText\" className=\"text-right\" >\n                                {editEvent ? <input id=\"eventNameEl\" type=\"text\" value={eventNameUpdate} onChange={handleEventNameChange} placeholder={eventNameUpdate} /> : <h1 id=\"eventNameEl\" className=\"display-1\">{props.eventInFocus.eventName}</h1>}\n                                {editEvent ? <input id=\"briefDetailsEl\" type=\"text\" value={eventBriefDetailsUpdate} onChange={handleEventBriefDetailsUpdate} placeholder={eventBriefDetailsUpdate} /> : <h5 id=\"briefDetailsEl\">{props.eventInFocus.briefDetails}</h5>}\n                            </div>\n                            {editEvent ? <div id=\"bannerUpload\">\n                                <h6 className=\"text-center\">Upload a Banner Image </h6>\n                                <div className=\"d-flex flex-column align-items-center\">\n                                    {props.eventInFocus.images.banner !== \"none\" ?\n                                        <div>\n                                            <button className=\"btn btn3\" onClick={removeBannerImage}>Remove Image</button>\n                                        </div>\n                                        :\n                                        <div className=\"d-flex flex-column align-items-center\">\n                                            <input type=\"file\" className=\"\" onChange={handleEventImgUploadChange} />\n                                            <button className=\"mt-2 h-50 w-50 btn btn3\" onClick={() => props.uploadImage(\"banner\")} >Submit</button>\n                                        </div>\n                                    }\n                                </div>\n                            </div> : \"\"}\n                            {editEvent ? <div id=\"thumbUpload\" className=\"d-flex flex-column align-items-center\">\n                                {props.eventInFocus.images.thumb !== \"none\" ? <img id=\"thumbPlace\" src={'../../../uploads/eventImage/' + props.eventInFocus.images.thumb} /> : <img className=\"img-fluid\" id=\"thumbPlace\" src=\"https://www.pulsecarshalton.co.uk/wp-content/uploads/2016/08/jk-placeholder-image.jpg\" />}\n                                <h6 className=\"text-center\">Upload a Thumbnail </h6>\n                                <div className=\"d-flex flex-column align-items-center\">\n                                    {props.eventInFocus.images.thumb !== \"none\" ?\n                                        <div>\n                                            <button className=\"btn btn3\" onClick={removeThumbImage}>Remove Image</button>\n                                        </div>\n                                        :\n                                        <div className=\"d-flex flex-column align-items-center\">\n                                            <input type=\"file\" className=\"\" onChange={handleEventImgUploadChange} />\n                                            <button className=\"mt-2 h-50 w-50 btn btn3\" onClick={() => props.uploadImage(\"thumb\")} >Submit</button>\n                                        </div>\n                                    }\n                                </div>\n                            </div> : \"\"}\n                        </Col>\n                    </Row>\n                    <Row className=\"eventContent eventBox mx-0 d-flex justify-content-center\">\n                        <Col md={2} className=\"my-3 eventBtn d-flex flex-column align-items-center justify-content-around\">\n                            {eventAuth ?\n                                <div className=\"d-flex flex-column align-items-center w-100\">\n                                    <button className=\"my-1 btn btn3\" onClick={deleteThisEvent}>Delete Event</button>\n                                    <button className=\"my-1 btn btn3\" onClick={editingEvent}>Update</button>\n                                </div>\n                                : \"\"}\n                            {userIsAttending ?\n                                <div className=\"d-flex flex-column align-items-center\">\n                                    <p className=\"m-0\">currently attending</p>\n                                    <button className=\"px-4 btn btn3\" onClick={bailOnEvent}>Bail...</button>\n                                </div>\n                                : \"\"}\n                            {!userIsAttending && !eventAuth ?\n                                <button className=\"btn btn3\" onClick={handleShow}>Attend</button>\n                                : \"\"}\n                            <button onClick={props.toggleAttendees} className=\"btn btn3\" style={props.windowSize < 1350 ? { fontSize: \".7rem\", paddingLeft: \"5px\" } : {}}>Who's Turning Up?</button>\n                        </Col>\n                        <Col md={3} className=\"my-3 \">\n                            <h3>When its happening</h3>\n                            {props.eventInFocus.datesOpen ? (\n                                props.eventInFocus.datesOpen.map(item => (\n                                    <h6>{item}</h6>\n                                ))\n                            ) : (<h6>No dates on the calendar yet...</h6>)}\n                            {editEvent ? <button onClick={addingDate} className=\"btn btn3 btn-sm\">Add a date</button> : \"\"}\n                            {addDate ? <div className=\"my-3\">\n                                <DatePicker\n                                    selected={startDate}\n                                    dateFormat=\"eeee MMM dd, yyyy\"\n                                    onChange={date => setStartDate(date)}\n                                    selectsStart\n                                    startDate={startDate}\n                                />\n                                <button onClick={submitDate} className=\"ml-1 btn btn3 btn-sm\">+</button>\n                            </div> : \"\"}\n\n                            <h3>Where its happening</h3>\n                            {editEvent ? <textarea rows=\"1\" cols=\"60\" type=\"text\" value={eventLocationUpdate} onChange={handleEventLocationUpdate} placeholder={eventLocationUpdate} /> : <h6>{props.eventInFocus.location}</h6>}\n                        </Col>\n                        <Col md={6} className=\"my-3\">\n                            <h3>Details</h3>\n                            {editEvent ? <textarea rows=\"5\" cols=\"120\" type=\"text\" value={eventDetailsUpdate} onChange={handleEventDetailsUpdate} placeholder={eventDetailsUpdate} /> : <p>{props.eventInFocus.details}</p>}\n                        </Col>\n                    </Row>\n\n                </div>\n                {/* MENU */}\n                {/* <Row>\n\n\n                    <Col md={8} className=\"my-5 mx-auto\" >\n                        <div className=\"card mx-auto\" style={{ border: \"none\", boxShadow: \"0 8px 16px 0 rgba(0,0,0,0.2)\" }}>\n                            <div className=\"card-body \">\n                                <h5 className=\"card-title\" style={{ textAlign: \"center\", opacity: \".8\" }}>What We Offer</h5>\n                                {eventAuth ?\n                                    <button className=\"btn btn3\" onClick={addingMenuItem}>Add Menu Item</button>\n                                    : \"\"}\n\n                                <div style={{ borderTop: \"solid\", borderColor: \"gray\" }}>\n                                    {props.eventInFocus.menu.map(item =>\n                                        <Menuitem\n                                            menuItem={item.menuItem}\n                                            itemDetails={item.itemDetails}\n                                            itemPrice={item.itemPrice}\n                                            eventAuth={eventAuth}\n                                        />\n                                    )}\n                                </div>\n                                {addMenuItem ? <div id=\"addingMenuItem\">\n                                    <Row >\n                                        <Col md={3}>\n                                            <img className=\"menuThumb\" src=\"https://cdn.shopify.com/s/files/1/0159/3150/6742/products/10-D-Coaster-1st-FULL-PRINT-Fast-food-pattern-design-funny-illustration_1800x1800.jpg?v=1583063900\" alt=\"food\" style={{ borderRadius: \"50%\", width: \"60%\", height: \"100%\", objectFit: \"cover\" }}></img>\n                                        </Col>\n                                        <Col md={5} className=\"my-2\">\n                                            <div className=\"card\" style={{ border: \"none\" }}>\n                                                <input className=\"menuInput\" onChange={event => setMenuItem(event.target.value)} placeholder=\"New Item Name\"></input>\n                                                <input className=\"menuInput\" onChange={event => setItemDetails(event.target.value)} placeholder=\"New Item Description\"></input>\n                                            </div>\n\n                                        </Col>\n                                        <Col md={3}>\n                                            <div className=\"card mx-0 my-3 float-right\" style={{ border: \"none\" }}>\n                                                <input className=\"menuInput\" onChange={event => setItemPrice(event.target.value)} placeholder=\"$0.00\"></input>\n                                                <button className=\"w-25 btn btn1\" onClick={submitMenuItem}>Add</button>\n                                            </div>\n\n                                        </Col>\n                                    </Row>\n                                </div> : \"\"}\n                            </div>\n                        </div>\n                    </Col>\n\n                </Row> */}\n                <>\n                    <Modal show={show} onHide={handleClose}>\n                        <Modal.Header closeButton>\n                            <Modal.Title>Which days are you turning up?</Modal.Title>\n                        </Modal.Header>\n                        <Modal.Body>\n                            {props.eventInFocus.datesOpen ? (\n\n                                props.eventInFocus.datesOpen.map((item, index) => (\n\n                                    <div>\n                                        <h6 id={\"dateItem\" + index} className=\" d-inline-block\">{item}</h6>\n                                        <button data-numb={index} onClick={handleAddDate} className=\"btn btn1 btn-sm ml-1\">x</button>\n                                    </div>\n                                ))\n\n                            ) : (<h6 className=\"popOverDate\">Wait till we're on the calendar</h6>)}\n                        </Modal.Body>\n                        <Modal.Footer>\n                            <button className=\"btn btn1 btn-sm\" onClick={handleAttending} >Let's GO!</button>\n                            <button className=\"btn btn1 btn-sm\" onClick={handleClose} >Close</button>\n                        </Modal.Footer>\n                    </Modal>\n                </>\n            </Container>\n        </div>\n    );\n};\n\nexport default Event;\n","/root/Turnup/client/src/pages/User.js",["120","121","122","123","124","125"],"import React, { useState, useEffect, } from \"react\";\nimport { useParams, useHistory } from \"react-router-dom\";\nimport API from \"../utils/api/API.js\";\nimport Hosted from \"../components/Hosted/Hosted.js\"\nimport Attending from \"../components/Attending/Attending.js\"\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Calendar from 'react-calendar';\nimport profilePic from '../assets/profile.png'\nimport 'react-calendar/dist/Calendar.css';\nimport '../App.css'\n\nfunction User(props) {\n    const [aboutMeUpdate, setAboutMeUpdate] = useState();\n    const [firstNameUpdate, setFirstNameUpdate] = useState();\n    const [displayTab, setDisplayTab] = useState(\"aboutMe\");\n    const [lastNameUpdate, setLastNameUpdate] = useState();\n    const [editAbout, setEditAbout] = useState(false);\n    const [displayedUser, setDisplayedUser] = useState({ Username: \"user\", hosting: [], attending: [], profilePicture: { imageName: \"none\" } });\n\n    let { Username } = useParams();\n\n    useEffect(() => {\n        API.getUsername({ Username: Username }).then(res => {\n            if (!res.data) {\n                window.location.href = '/notfound'\n            }\n            setDisplayedUser(res.data);\n        });\n        setAboutMeUpdate(displayedUser.about);\n        setFirstNameUpdate(displayedUser.firstName);\n        setLastNameUpdate(displayedUser.lastName);\n    }, [Username]);\n\n    function editAboutMe() {\n        if (!editAbout) {\n            setEditAbout(true);\n            setFirstNameUpdate(displayedUser.firstName);\n            setLastNameUpdate(displayedUser.lastName);\n        }\n        else {\n            setEditAbout(false);\n        };\n    };\n\n    function handleAboutChange(event) {\n        setAboutMeUpdate(event.target.value);\n    };\n\n    function handleFirstNameChange(event) {\n        setFirstNameUpdate(event.target.value);\n    };\n\n    function handleLastNameChange(event) {\n        setLastNameUpdate(event.target.value);\n    };\n\n    function handleImageUploadChange(event) {\n        props.setImageForUpload(event.target.files[0]);\n    };\n\n    function updateAbout() {\n        API.updateUser(props.user._id, {\n            about: aboutMeUpdate,\n            firstName: firstNameUpdate,\n            lastName: lastNameUpdate\n        })\n            .catch(err => console.log(err));\n        setEditAbout(false);\n        window.location.reload(false);\n    };\n\n    function removeImage() {\n        API.updateUser(props.user._id, {\n            profilePicture: { imageName: \"none\" },\n        })\n            .catch(err => console.log(err))\n            .then(API.deleteProfileImage(props.user.profilePicture.imageName, {}));\n        window.location.reload(false);\n    };\n\n    function deleteThisUser() {\n        props.setAlertProps(\"deleteUser\");\n        props.toggleAlert();\n    };\n\n    function bailEvent(target) {\n        API.updateUser(props.user._id, { $pull: { attending: { event: target } } })\n            .then(res => console.log(res))\n            .catch(err => console.log(err))\n            .then(API.updateEvent(target, { $pull: { attendees: { guest: props.user._id } } }))\n            .then(res => console.log(res))\n            .catch(err => console.log(err))\n        window.location.reload(false);\n    };\n\n    return (\n        <div id=\"userPage\" className=\"d-flex justify-content-center\">\n            <Container fluid>\n                <div className=\"mt-5\">\n                    <Row id=\"dashLinkBox\" className=\"d-flex justify-content-center\">\n                        <Col md={2} className=\"text-center p-0 dashLink\">\n                            <a href=\"#\" className=\"m-auto\" onClick={() => setDisplayTab(\"aboutMe\")}>About Me</a>\n                        </Col>\n                        <Col md={2} className=\"text-center p-0 dashLink\">\n                            <a href=\"#\" className=\"m-auto\" onClick={() => setDisplayTab(\"popUps\")} >My Pop Ups</a>\n                        </Col>\n                    </Row>\n                    {displayTab === \"aboutMe\" ?\n                        <div className=\"shadowUser about\">\n                            <Row className=\"Row contentBox boxInner d-flex justify-content-center py-5\">\n                                <Col md={3} className=\"d-flex justify-content\">\n                                    <div className=\"my-3\" >\n                                        {displayedUser.profilePicture.imageName === \"none\" ?\n                                            <img src={profilePic} id=\"profileImage\"></img>\n                                            :\n                                            <img src={'../../../uploads/profileImage/' + displayedUser.profilePicture.imageName} id=\"profileImage\"></img>\n                                        }\n                                        {editAbout ?\n                                            <div>\n                                                <h6 className=\"text-center\">Upload a profile pic</h6>\n                                                {displayedUser.profilePicture.imageName !== \"none\" ?\n                                                    <div>\n                                                        <button className=\"btn btn3\" onClick={removeImage}>Remove Image</button>\n                                                    </div>\n                                                    :\n                                                    <div className=\"d-flex flex-column align-items-center\">\n                                                        <input type=\"file\" className=\"\" onChange={handleImageUploadChange} />\n                                                        <button className=\"h-50 w-50 mt-2 btn btn3\" onClick={() => props.uploadImage(\"profile\")}>Submit</button>\n                                                    </div>\n                                                }\n                                            </div> : \"\"}\n                                    </div>\n                                </Col>\n                                <Col md={5} className=\"d-flex mt-3 justify-content\">\n                                    <div className=\"Row d-flex justify-content\">\n                                        <div className=\"col-md-12 d-flex justify-content-center\">\n                                            <div>\n                                                <h3 className=\"\">{displayedUser.Username}</h3>\n                                                {editAbout ? <input type=\"text\" value={firstNameUpdate} onChange={handleFirstNameChange} placeholder=\"first name\" /> : <h6 className=\"d-inline-block mt-2\">{displayedUser.firstName}</h6>} {editAbout ? <input type=\"text\" value={lastNameUpdate} onChange={handleLastNameChange} placeholder=\"last name\" /> : <h6 className=\"d-inline-block mt-2\"> {displayedUser.lastName}</h6>}\n                                                <h6 className=\"mt-4\">ABOUT ME</h6>\n                                                {editAbout ? <textarea type=\"text\" value={aboutMeUpdate} onChange={handleAboutChange} rows=\"5\" cols=\"80\">{displayedUser.about}</textarea> : <p>{displayedUser.about}</p>}\n                                            </div>\n                                        </div>\n                                    </div>\n                                </Col>\n                                {props.isLogged ?\n                                    <Col md={2} className=\"d-flex flex-column justify-content-between my-3\">\n                                        {editAbout ? <button onClick={updateAbout} className=\"btn btn3 editButtons\">Update</button> : \"\"}\n                                        {editAbout ? <button onClick={deleteThisUser} className=\"btn btn3 editButtons\">Delete Me!</button> : \"\"}\n                                        <button onClick={editAboutMe} style={props.windowSize < 1350 ? { fontSize: \".6rem\", paddingLeft: \"7px\" } : {}} className=\"btn btn3 editButtons\">Edit About Me</button>\n\n                                    </Col>\n                                    : \"\"}\n                                <Col md={12} className=\"mt-5\">\n                                    <hr id=\"aboutHR\" />\n                                </Col>\n                                <Col md={4} className=\"d-flex flex-column justify-content-center my-3 mr-5\">\n                                    <h3 className=\"text-center\">CALENDER</h3>\n                                    <div id=\"calendar\">\n                                        <Calendar></Calendar>\n                                    </div>\n                                </Col>\n                                <Col md={4} className=\"my-3 ml-5\" id=\"attendingBox\">\n                                    <h3 className=\"text-center\">EVENTS ATTENDING</h3>\n                                    {console.log(displayedUser)}\n\n                                    {displayedUser.hosting.length ?\n                                        displayedUser.hosting.map(item =>\n                                            <Attending\n                                                eventName={item.eventName}\n                                                eventString={item.eventString}\n                                                firstCat={item.category.first}\n                                                secondCat={item.category.second}\n                                                thirdCat={item.category.third}\n                                                briefDetails={item.briefDetails}\n                                                isHost={displayedUser.Username}\n\n                                            />\n                                        )\n                                        : \"\"\n                                    }\n                                    {displayedUser.attending.length ?\n                                        displayedUser.attending.map(item =>\n                                            <Attending\n                                                eventName={item.event.eventName}\n                                                eventString={item.event.eventString}\n                                                firstCat={item.event.category.first}\n                                                secondCat={item.event.category.second}\n                                                thirdCat={item.event.category.third}\n                                                briefDetails={item.event.briefDetails}\n                                                _id={item.event._id}\n                                                bailEvent={bailEvent}\n                                                isHost={false}\n                                            />\n                                        )\n                                        : \"\"\n                                    }\n                                    {displayedUser.hosting.length || displayedUser.attending.length ?\n                                        \"\"\n                                        : <h6 className=\"text-center mt-5\">I'm not currently attending any events</h6>}\n                                </Col>\n                            </Row>\n\n                        </div>\n                        : \"\"}\n                    {displayTab === \"popUps\" ?\n                        <div className=\"shadowUser\">\n                            <Row className=\"Row contentBox boxInner d-flex justify-content-center mt-5\" >\n                                <Col md={12} id=\"hostingCol\" className=\"d-flex justify-content-center my-3\">\n                                    <h3 className=\"d-inline-block\">Pop Ups I'm Hosting</h3>{props.isLogged ? <button id=\"hostBtn\" onClick={props.toggleHost} className=\"btn btn3 d-flex align-self-end\">Host an Event</button> : \"\"}\n                                </Col>\n                                {displayedUser.hosting.length ? (\n                                    displayedUser.hosting.map(item => (\n                                        <Hosted\n                                            isLogged={props.isLogged}\n                                            eventName={item.eventName}\n                                            eventString={item.eventString}\n                                            firstCat={item.category.first}\n                                            secondCat={item.category.second}\n                                            thirdCat={item.category.third}\n                                            briefDetails={item.briefDetails}\n                                            location={item.location}\n                                            datesOpen={item.datesOpen}\n                                            banner={item.images.banner}\n                                        />\n                                    ))\n                                ) : (<h6 className=\"mb-4\">I'm not hosting any events currently</h6>)\n                                }\n                            </Row>\n                        </div>\n                        : \"\"}\n                </div>\n            </Container>\n        </div>\n    );\n};\n\nexport default User;","/root/Turnup/client/src/pages/Browse.js",["126","127","128","129","130"],"import React, { useState, useEffect } from \"react\";\nimport API from \"../utils/api/API\";\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Carousell from '../components/Carousel/Carousel'\nimport BrowseCard from '../components/Browsecard/BrowseCard'\nimport leftArrow from '../assets/leftArrow.png'\nimport rightArrow from '../assets/rightArrow.png'\n\nfunction Browse(props) {\n    const [browse, setBrowse] = useState([]);\n    const [sortedFood, setSortedFood] = useState([]);\n    const [sortedMaker, setSortedMaker] = useState([]);\n    const [foodCount, setFoodCount] = useState({ start: \"\", fin: \"\" });\n    const [makerCount, setMakerCount] = useState({ start: \"\", fin: \"\" });\n    const [foodBackDisplay, setFoodBackDisplay] = useState(\"\");\n    const [foodFwdDisplay, setFoodFwdDisplay] = useState(\"\");\n    const [makerBackDisplay, setMakerBackDisplay] = useState(\"\");\n    const [makerFwdDisplay, setMakerFwdDisplay] = useState(\"\");\n\n    useEffect(() => {\n        API.getEvents()\n            .then(res => {\n                setBrowse(res.data)\n\n            })\n    }, []);\n\n    useEffect(() => {\n        let food = []\n        let maker = []\n        browse.map(item => {\n            if (item.category.first === \"Food\") {\n                food.push(item)\n            } else (maker.push(item))\n        })\n        setSortedFood(food)\n        setSortedMaker(maker)\n    }, [browse]);\n\n    useEffect(() => {\n        setFoodCount({ start: 0, fin: 5 })\n    }, [sortedFood]);\n\n    useEffect(() => {\n        setMakerCount({ start: 0, fin: 5 })\n    }, [sortedMaker]);\n\n\n    function slideFoodUp() {\n        let count = { ...foodCount };\n        if ((foodCount.fin >= sortedFood.length)) {\n            setFoodFwdDisplay(\"none\");\n            return;\n        }\n        setFoodBackDisplay(\"\");\n        setFoodCount({ start: count.start + 5, fin: count.fin + 5 });\n\n    }\n\n    function slideFoodDown() {\n        let count = { ...foodCount };\n        if ((foodCount.start <= 0)) {\n            setFoodBackDisplay(\"none\");\n            return;\n        }\n        setFoodFwdDisplay(\"\");\n        setFoodCount({ start: count.start - 5, fin: count.fin - 5 });\n\n    }\n\n    function slideMakerUp() {\n        let count = { ...makerCount };\n        if ((makerCount.fin >= sortedMaker.length)) {\n            setMakerFwdDisplay(\"none\");\n            return;\n        }\n        setMakerBackDisplay(\"\");\n        setMakerCount({ start: count.start + 5, fin: count.fin + 5 });\n    }\n\n    function slideMakerDown() {\n        let count = { ...makerCount };\n        if ((makerCount.start <= 0)) {\n            setMakerBackDisplay(\"none\");\n            return;\n        }\n        setMakerFwdDisplay(\"\");\n        setMakerCount({ start: count.start - 5, fin: count.fin - 5 });\n    }\n\n\n    return (\n        <div id=\"browsePage\">\n            <Container fluid className=\"m-0\">\n                <Row >\n                    <div className=\"col-12 browseMain\">\n                        <Carousell\n                            browse={browse}\n                        ></Carousell>\n                    </div>\n                </Row>\n                <Row>\n                    <div className=\"col-12\" style={{ textAlign: \"center\", marginTop: \"3rem\", marginBottom: \"2rem\" }}>\n                        <h2 className=\"cardCategory\">Food</h2>\n                    </div>\n                </Row>\n                <Row>\n                    <Col md={1} className=\"d-flex\">\n                        <img className=\"arrowIcon m-auto\" style={{ display: foodBackDisplay }} onClick={slideFoodDown} src={leftArrow} ></img>\n                    </Col>\n                    <Col md={10}>\n                        <div className=\"netf d-flex justify-content-center\">\n                            {sortedFood.slice(foodCount.start, foodCount.fin).map(item =>\n                                <BrowseCard\n                                    cardTitle={item.eventName}\n                                    eventString={item.eventString}\n                                    cardText={item.briefDetails}\n                                    cardPhoto={item.images.thumb} />\n                            )}\n                        </div>\n                    </Col>\n                    <Col md={1} className=\"d-flex\">\n                        <img className=\"arrowIcon m-auto\" style={{ display: foodFwdDisplay }} onClick={slideFoodUp} src={rightArrow}></img>\n                    </Col>\n\n                </Row>\n                <Row>\n                    <div className=\"col-12\" style={{ textAlign: \"center\", marginTop: \"3rem\", marginBottom: \"2rem\" }}>\n                        <h2 className=\"cardCategory\">Makers</h2>\n                    </div>\n                </Row>\n                <Row>\n                    <Col md={1} className=\"d-flex\">\n                        <img className=\"arrowIcon m-auto\" style={{ display: makerBackDisplay }} onClick={slideMakerDown} src={leftArrow} ></img>\n                    </Col>\n                    <Col md={10}>\n                        <div className=\"netf d-flex justify-content-center\">\n                            {sortedMaker.slice(makerCount.start, makerCount.fin).map(item =>\n                                <BrowseCard\n                                    cardTitle={item.eventName}\n                                    eventString={item.eventString}\n                                    cardText={item.briefDetails}\n                                    cardPhoto={item.images.thumb}\n                                />\n                            )}\n                        </div>\n                    </Col>\n                    <Col md={1} className=\"d-flex\">\n                        <img className=\"arrowIcon m-auto\" style={{ display: makerFwdDisplay }} onClick={slideMakerUp} src={rightArrow}></img>\n                    </Col>\n                </Row>\n            </Container>\n        </div>\n    );\n}\n\nexport default Browse;","/root/Turnup/client/src/utils/api/API.js",["131"],"import axios from \"axios\";\n\nexport default {\n  getUsers: function () {\n    return axios.get(\"/api/user\");\n  },\n\n  getUser: function (id) {\n    return axios.get(\"/api/user/\" + id);\n  },\n\n  getUsername: function (usernameData) {\n    var userPublic = { Username : usernameData.Username};\n    return axios.post(\"/api/user/one\", userPublic);\n  },\n\n  signIn: function (userData) {\n    return axios.post(\"/login\", userData);\n  },\n\n  deleteUser: function (id) {\n    return axios.delete(\"/api/user/\" + id);\n  },\n\n  updateUser: function (id, update) {\n    return axios.put(\"/api/user/\" + id, update);\n  },\n\n  saveUser: function (userData) {\n    return axios.post(\"/api/user/\", userData);\n  },\n\n  getEvents: function(){\n    return axios.get(\"/api/event\")\n  },\n\n  saveEvent: function (userData) {\n    return axios.post(\"/api/event/\", userData);\n  },\n\n  getEventname: function (eventNameData) {\n    var eventRequest = { eventName : eventNameData.eventName};\n    return axios.post(\"/api/event/one\", eventRequest);\n  },\n\n  getEventstring: function (eventStringData) {\n    var eventRequest = { eventString : eventStringData.eventString};\n    return axios.post(\"/api/event/one\", eventRequest);\n  },\n\n  updateEvent: function (id, update) {\n    return axios.put(\"/api/event/\" + id, update);\n  },\n\n  deleteEvent: function (id) {\n    return axios.delete(\"/api/event/\" + id);\n  },\n\n  postProfileImage: function (id, imageData) {\n    return axios.post(\"/api/upload/profileImage/\" + id, imageData);\n  },\n\n  deleteProfileImage: function (id, imageData) {\n    return axios.delete(\"/api/upload/profileImage/\" + id, imageData);\n  },\n\n  postEventImage: function (id, imageData) {   \n    return axios.post(\"/api/upload/eventImage/\" + id, imageData);\n  },\n  \n  deleteEventImage: function (id, imageData) {\n    return axios.delete(\"/api/upload/eventImage/\" + id, imageData);\n  }\n \n};","/root/Turnup/client/src/components/Nav/Nav.js",["132","133","134","135","136"],"import React from \"react\";\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport Turnupicon from '../../assets/turnupIcon.png'\nimport Login from \"../Login\"\nimport \"./style.css\"\n\nfunction Nav(props) {\n\n    function about(e) {\n        e.preventDefault();\n        props.setAlertProps(\"about\")\n        props.toggleAlert()\n    }\n\n    return (\n        <div id=\"nav\">\n            <Row noGutters className=\"navRow d-flex mt-2 justify-content-between\">\n                <Col lg={3} className=\"navTab text-center d-flex align-items-center ml-2  \">\n                    <img className=\"mx-1\" src=\"https://img.icons8.com/color/60/000000/facebook.png\" />\n                    <img className=\"mx-1\" src=\"https://img.icons8.com/fluency/60/000000/instagram-new.png\" />\n                    <img className=\"mx-1\" src=\"https://img.icons8.com/fluency/60/000000/twitter.png\" />\n                </Col>\n                <Col lg={3} className=\"navTab text-center  p-0\">\n                    <Row className=\"d-flex align-items-center\">\n                        <Col lg={3} className=\"navTab text-center \">\n                            <a href=\"/\" ><img id=\"icon\" className=\"img-fluid \" src={Turnupicon} /> </a>\n                        </Col>\n                        <Col lg={3} className=\"navTab text-center \">\n                            <a href=\"/\" onClick={e => about(e)} className=\"m-auto\">About</a>\n                        </Col>\n\n                        <Col lg={3} className=\"navTab text-center \">\n                            <a href=\"/browse\" className=\"m-auto\">Browse</a>\n\n                        </Col>\n\n                        <Col lg={3} className=\"navTab text-center \">\n                            <a href=\"#\" className=\"m-auto\">Search</a>\n                        </Col>\n                    </Row>\n                </Col>\n                <Col lg={3} className=\" loginCol p-0\">\n                    {!props.isLogged ? \"\" : <a href={\"/user/\" + props.user.Username}><button className=\"mt-1 btn btn3\">Profile</button></a>}\n                    {!props.isLogged ?\n                        <Login\n                            userName={props.userName}\n                            password={props.password}\n                            setUserName={props.setUserName}\n                            setPassword={props.setPassword}\n                            handleSignIn={props.handleSignIn}\n                        />\n                        : <button onClick={props.logOut} className=\"ml-1 btn btn3\">Log Out</button>}\n                </Col>\n            </Row>\n\n        </div>\n    );\n}\n\nexport default Nav;\n","/root/Turnup/client/src/components/Signup/Signup.js",["137","138"],"import React, { useState, useEffect, useRef } from \"react\";\nimport \"./style.css\"\nimport Tooltip from 'react-bootstrap/Tooltip';\nimport Overlay from \"react-bootstrap/Overlay\";\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\n\n\nfunction Signup(props) {\n  const [show, setShow] = useState(false);\n  const target = useRef(null);\n  \n  useEffect(() => {\n    if (props.showWarning === \"Try another password...\") {\n      setShow(!show);\n      setTimeout(() => {\n        setShow(show);\n      },  2000);\n    }\n  }, [props.showWarning]);\n\n  const {\n    buttonLabel,\n    className\n  } = props;\n\n  return (\n\n    <div>\n      <Modal id=\"signUpBody\" isOpen={props.modalSignUp} toggle={props.toggleSignUp} className={className}>\n        <ModalHeader toggle={props.toggleSignUp}>\n          <h4>Welcome to Turnup</h4>\n          <h6>sign up and see what its all about!</h6>\n        </ModalHeader>\n        <ModalBody>\n          <div className=\"\">\n            <p className=\"mt-2 mb-0\">User Name<span className=\"asterisk\"> *</span></p>\n            <input onChange={e => props.setUserName(e.target.value)} type=\"text\" username=\"username\" id=\"username\" className=\"m-0\" placeholder=\"theDude\" />\n          </div>\n          <div className=\"\">\n            <p className=\"mt-2 mb-0\">Email Address<span className=\"asterisk\"> *</span></p>\n            <input onChange={e => props.setEmail(e.target.value)} type=\"email\" name=\"email\" id=\"email\" className=\"m-0\" placeholder=\"jLebowksi@gmail.com\" />\n          </div>\n          <div className=\"\">\n\n            <p className=\"mt-2 mb-0 inline-block\" ref={target} onClick={() => setShow(!show)}>Password<span className=\"asterisk\"> *</span></p>\n            <Overlay target={target.current} show={show} placement=\"bottom\">\n              {(props) => (\n                <Tooltip id=\"overlay-example\" {...props}\n                style={{\n                  width: \"30%\",\n                  padding: '2px 10px',\n                  color: 'white',\n                  borderRadius: 3,\n                  ...props.style,\n                }}>\n                   password must inclued at least 1 uppercase, 1 lowercase, 1 number and 1 symbole ( !@#$%^&* )\n                </Tooltip>\n              )}\n            </Overlay>\n            <input onChange={e => props.setPassword(e.target.value)} type=\"password\" name=\"pass\" id=\"pass\" className=\"m-0\" placeholder=\"*******\" />\n          </div>\n          <div className=\"\">\n            <p className=\"mt-2 mb-0\">Confirm password<span className=\"asterisk\"> *</span></p>\n            <input onChange={e => props.setPassConfirm(e.target.value)} type=\"password\" name=\"re_pass\" id=\"re_pass\" className=\"m-0\" placeholder=\"********\" />\n          </div>\n          <div className=\"mt-3\">\n            {props.showWarning ?\n              <h4 className=\"warning pulse text-center mb-0\">{props.showWarning}</h4>\n              : <h4 className=\"mb-0\">{'\\u00A0'}</h4>}\n          </div>\n        </ModalBody>\n        <ModalFooter>\n          <Button className=\"btn btn3\" color=\"primary\" onClick={props.handleSignUpSubmit}>Submit</Button>{' '}\n          <Button className=\"btn btn3\" color=\"secondary\" onClick={props.toggleSignUp}>Cancel</Button>\n        </ModalFooter>\n      </Modal>\n    </div >\n  );\n};\n\n\nexport default Signup;\n","/root/Turnup/client/src/components/Eventguest/Eventguest.js",["139","140"],"import React from \"react\";\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport \"./style.css\"\n\nfunction Eventguest(props) {\n\n    console.log(props.host)\n\n    return (\n        <div id=\"eventGuest\" className=\"my-3 d-flex justify-content-center\">\n            <Row className=\"d-flex border-top pt-3 justify-content-center\">\n                <Col md={3}>\n                    <img className=\"thumbnail\" src=\"https://cdn.icon-icons.com/icons2/1378/PNG/512/avatardefault_92824.png\" id=\"profileImage\"></img>\n                </Col>\n\n                <Col md={8} className=\"m-auto\">\n                    <a href={'/user/' + props.Username}><h6>{props.Username}</h6></a>\n                    {props.host \n                        ? ( <p>Hosting</p> \n                        ) : (\n                            (<><p>dates they'll turnup...</p> \n                           \n                            {props.dates.map( (item, index) => (\n                            <p>{item}</p>\n                            ))}\n                            </>\n                        ))}\n                    \n                </Col>\n            </Row>\n\n        </div>\n    );\n}\n\nexport default Eventguest;","/root/Turnup/client/src/components/Menuitem/Menuitem.js",[],"/root/Turnup/client/src/components/Hosted/Hosted.js",[],"/root/Turnup/client/src/components/Attending/Attending.js",["141"],"import React, { useState } from \"react\";\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport \"./style.css\"\n\nfunction Attending(props) {\n    const [notBailing, setNotBailing] = useState(true);\n\n    function bailThisEvent() {\n        setNotBailing(false);\n        setTimeout(() => {\n            props.bailEvent(props._id);\n        }, 1500);   \n    };\n\n    return (\n        <div className=\"my-4\" id=\"attending\">\n            <div className=\"shadowBox\">\n                <Col md={12} className=\"hostedBox\">\n                    {notBailing ?\n                        <Row className=\"d-flex justify-content-around py-2\">\n                            <Col md={3} className=\"d-flex flex-column p-1 align-items-center justify-content-around\">\n                                {props.isHost ? <h5 className=\"ml-1\" >Hosting</h5> : \"\"}\n                                <a href={'/event/' + props.eventString} ><button className=\"btn btn3 btn-sm\">Check It!</button></a>\n                                {!props.isHost ? <button onClick={bailThisEvent} className=\"btn btn3 btn-sm mx-auto px-3\">Bail...</button> : \"\"}\n                            </Col>\n                            <Col md={8}>\n                                <h5 className=\"m-0 underline\">{props.eventName}</h5>\n                                <p className=\"mt-2 mb-0 underline\">Categories</p>\n                                <h6 className=\"m-0\">{props.firstCat}_{props.secondCat}_{props.thirdCat}</h6>\n                                <p className=\"mt-2 mb-0 underline\">a little about...</p>\n                                <h6>{props.briefDetails}</h6>\n                            </Col>\n                        </Row>\n                        :\n                        <Row className=\"d-flex justify-content-around py-2\">\n                            <Col md={12}>\n                                <h5 className=\"m-auto text-center p-4\">You are no longer attending this event.</h5>\n                            </Col>\n                        </Row>}\n                </Col>\n            </div>\n        </div>\n    );\n}\n\nexport default Attending;","/root/Turnup/client/src/components/Carousel/Carousel.js",["142","143"],"import React, { useState, useEffect } from 'react';\nimport {\n  Carousel,\n  CarouselItem,\n  CarouselControl,\n  CarouselIndicators,\n  CarouselCaption\n} from 'reactstrap';\nimport \"./style.css\"\nimport placeholder from '../../assets/4short.png'\n\n\n\nconst Carousell = (props) => {\n  const [activeIndex, setActiveIndex] = useState(0);\n  const [animating, setAnimating] = useState(false);\n  const [carouselEvents, setCarouselEvents] = useState([ {eventName: \"none\", images: {banner: \"\"}, briefDetails: \"\"}])\n\n  let random = Math.floor(Math.random() * 10);\n  let carouselBrowse = [];\n  carouselBrowse.push(props.browse[random])\n  carouselBrowse.push(props.browse[random])\n  carouselBrowse.push(props.browse[random])\n\n  const items = [\n    {\n      src: \"\",\n      altText: 'Slide 1',\n      caption: ''\n    },\n    {\n      src: \"\",\n      altText: 'Slide 2',\n      caption: ''\n    },\n    {\n\n      src: \"\",\n      altText: 'Slide 3',\n      caption: ''\n    }\n  ];\n\n  useEffect(() => {\n    let eventRating = props.browse.map((item) => { return item.attendees.length })\n    let topValues = [...eventRating].sort((a, b) => b - a).slice(0, 3);\n    let eventsForCarousel = props.browse.filter(item => item.attendees.length >= topValues[2])\n    if (eventsForCarousel.length) {\n    setCarouselEvents(eventsForCarousel)\n    }\n  }, [props.browse])\n\n\n  const next = () => {\n    if (animating) return;\n    const nextIndex = activeIndex === carouselEvents.length - 1 ? 0 : activeIndex + 1;\n    setActiveIndex(nextIndex);\n  }\n\n  const previous = () => {\n    if (animating) return;\n    const nextIndex = activeIndex === 0 ? carouselEvents.length - 1 : activeIndex - 1;\n    setActiveIndex(nextIndex);\n  }\n\n  const goToIndex = (newIndex) => {\n    if (animating) return;\n    setActiveIndex(newIndex);\n  }\n\n  const slides = carouselEvents.map((item) => {\n    return (\n      <CarouselItem\n        onExiting={() => setAnimating(true)}\n        onExited={() => setAnimating(false)}\n        key={item.src}\n      >\n        {item.images.banner !== \"none\" ? <img style={{ height: \"50vh\", objectFit: \"cover\" }} id=\"bannerImage\" src={'../../../uploads/eventImage/' + item.images.banner} /> : <img id=\"bannerImage\" src={placeholder} />}\n        <CarouselCaption captionText={item.caption} captionHeader={item.caption} />\n      </CarouselItem>\n    );\n  });\n\n  return (\n\n    <div id=\"carouselOver\">\n      <div id=\"carouselText\">\n        <a href={'/event/' + carouselEvents[activeIndex].eventString} > <h1 className=\"display-1 text-right mx-3\">{carouselEvents[activeIndex].eventName}</h1> </a>\n        <p className=\"text-right mr-4\">{carouselEvents[activeIndex].briefDetails}</p>\n      </div>\n\n      <Carousel\n        activeIndex={activeIndex}\n        next={next}\n        previous={previous}\n      >\n        <CarouselIndicators items={items} activeIndex={activeIndex} onClickHandler={goToIndex} />\n        {slides}\n        <CarouselControl direction=\"prev\" directionText=\"Previous\" onClickHandler={previous} />\n        <CarouselControl direction=\"next\" directionText=\"Next\" onClickHandler={next} />\n      </Carousel>\n    </div>\n  );\n}\n\nexport default Carousell;\n\n\n","/root/Turnup/client/src/components/Browsecard/BrowseCard.js",[],"/root/Turnup/client/src/components/Login/index.js",[],{"ruleId":"144","severity":1,"message":"145","line":17,"column":22,"nodeType":"146","messageId":"147","endLine":17,"endColumn":35},{"ruleId":"144","severity":1,"message":"148","line":35,"column":21,"nodeType":"146","messageId":"147","endLine":35,"endColumn":33},{"ruleId":"149","severity":1,"message":"150","line":141,"column":7,"nodeType":"151","messageId":"152","endLine":142,"endColumn":15},{"ruleId":"153","severity":1,"message":"154","line":17,"column":17,"nodeType":"155","endLine":17,"endColumn":113},{"ruleId":"144","severity":1,"message":"156","line":9,"column":5,"nodeType":"146","messageId":"147","endLine":9,"endColumn":16},{"ruleId":"157","severity":1,"message":"158","line":38,"column":15,"nodeType":"155","endLine":38,"endColumn":124},{"ruleId":"144","severity":1,"message":"156","line":11,"column":5,"nodeType":"146","messageId":"147","endLine":11,"endColumn":16},{"ruleId":"159","severity":1,"message":"160","line":12,"column":8,"nodeType":"161","endLine":12,"endColumn":19,"suggestions":"162"},{"ruleId":"144","severity":1,"message":"156","line":15,"column":9,"nodeType":"146","messageId":"147","endLine":15,"endColumn":20},{"ruleId":"157","severity":1,"message":"158","line":14,"column":7,"nodeType":"155","endLine":14,"endColumn":63},{"ruleId":"157","severity":1,"message":"158","line":15,"column":7,"nodeType":"155","endLine":15,"endColumn":72},{"ruleId":"157","severity":1,"message":"158","line":16,"column":7,"nodeType":"155","endLine":16,"endColumn":71},{"ruleId":"157","severity":1,"message":"158","line":17,"column":7,"nodeType":"155","endLine":17,"endColumn":71},{"ruleId":"157","severity":1,"message":"158","line":18,"column":7,"nodeType":"155","endLine":18,"endColumn":71},{"ruleId":"157","severity":1,"message":"158","line":19,"column":7,"nodeType":"155","endLine":19,"endColumn":97},{"ruleId":"144","severity":1,"message":"163","line":2,"column":21,"nodeType":"146","messageId":"147","endLine":2,"endColumn":31},{"ruleId":"144","severity":1,"message":"164","line":4,"column":8,"nodeType":"146","messageId":"147","endLine":4,"endColumn":16},{"ruleId":"159","severity":1,"message":"160","line":49,"column":8,"nodeType":"161","endLine":49,"endColumn":22,"suggestions":"165"},{"ruleId":"159","severity":1,"message":"166","line":69,"column":8,"nodeType":"161","endLine":69,"endColumn":20,"suggestions":"167"},{"ruleId":"157","severity":1,"message":"158","line":222,"column":76,"nodeType":"155","endLine":222,"endColumn":172},{"ruleId":"157","severity":1,"message":"158","line":222,"column":175,"nodeType":"155","endLine":222,"endColumn":217},{"ruleId":"157","severity":1,"message":"158","line":243,"column":79,"nodeType":"155","endLine":243,"endColumn":173},{"ruleId":"157","severity":1,"message":"158","line":243,"column":176,"nodeType":"155","endLine":243,"endColumn":313},{"ruleId":"144","severity":1,"message":"163","line":2,"column":21,"nodeType":"146","messageId":"147","endLine":2,"endColumn":31},{"ruleId":"159","severity":1,"message":"168","line":34,"column":8,"nodeType":"161","endLine":34,"endColumn":18,"suggestions":"169"},{"ruleId":"170","severity":1,"message":"171","line":104,"column":29,"nodeType":"155","endLine":104,"endColumn":101},{"ruleId":"170","severity":1,"message":"171","line":107,"column":29,"nodeType":"155","endLine":107,"endColumn":101},{"ruleId":"157","severity":1,"message":"158","line":116,"column":45,"nodeType":"155","endLine":116,"endColumn":85},{"ruleId":"157","severity":1,"message":"158","line":118,"column":45,"nodeType":"155","endLine":118,"endColumn":148},{"ruleId":"172","severity":1,"message":"173","line":33,"column":25,"nodeType":"174","messageId":"175","endLine":33,"endColumn":27},{"ruleId":"157","severity":1,"message":"158","line":111,"column":25,"nodeType":"155","endLine":111,"endColumn":137},{"ruleId":"157","severity":1,"message":"158","line":125,"column":25,"nodeType":"155","endLine":125,"endColumn":134},{"ruleId":"157","severity":1,"message":"158","line":136,"column":25,"nodeType":"155","endLine":136,"endColumn":139},{"ruleId":"157","severity":1,"message":"158","line":151,"column":25,"nodeType":"155","endLine":151,"endColumn":136},{"ruleId":"176","severity":1,"message":"177","line":3,"column":1,"nodeType":"178","endLine":75,"endColumn":3},{"ruleId":"157","severity":1,"message":"158","line":20,"column":21,"nodeType":"155","endLine":20,"endColumn":103},{"ruleId":"157","severity":1,"message":"158","line":21,"column":21,"nodeType":"155","endLine":21,"endColumn":110},{"ruleId":"157","severity":1,"message":"158","line":22,"column":21,"nodeType":"155","endLine":22,"endColumn":104},{"ruleId":"157","severity":1,"message":"158","line":27,"column":42,"nodeType":"155","endLine":27,"endColumn":99},{"ruleId":"170","severity":1,"message":"171","line":39,"column":29,"nodeType":"155","endLine":39,"endColumn":60},{"ruleId":"159","severity":1,"message":"179","line":19,"column":6,"nodeType":"161","endLine":19,"endColumn":25,"suggestions":"180"},{"ruleId":"144","severity":1,"message":"156","line":22,"column":5,"nodeType":"146","messageId":"147","endLine":22,"endColumn":16},{"ruleId":"144","severity":1,"message":"181","line":2,"column":8,"nodeType":"146","messageId":"147","endLine":2,"endColumn":17},{"ruleId":"157","severity":1,"message":"158","line":15,"column":21,"nodeType":"155","endLine":15,"endColumn":143},{"ruleId":"144","severity":1,"message":"181","line":2,"column":8,"nodeType":"146","messageId":"147","endLine":2,"endColumn":17},{"ruleId":"157","severity":1,"message":"158","line":78,"column":42,"nodeType":"155","endLine":78,"endColumn":171},{"ruleId":"157","severity":1,"message":"158","line":78,"column":174,"nodeType":"155","endLine":78,"endColumn":216},"no-unused-vars","'setwindowSize' is assigned a value but never used.","Identifier","unusedVar","'setLoginInit' is assigned a value but never used.","no-fallthrough","Expected a 'break' statement before 'default'.","SwitchCase","default","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","'buttonLabel' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["182"],"'useHistory' is defined but never used.","'Menuitem' is defined but never used.",["183"],"React Hook useEffect has a missing dependency: 'props.eventInFocus._id'. Either include it or remove the dependency array.",["184"],"React Hook useEffect has missing dependencies: 'displayedUser.about', 'displayedUser.firstName', and 'displayedUser.lastName'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setAboutMeUpdate' needs the current value of 'displayedUser.about'.",["185"],"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","React Hook useEffect has a missing dependency: 'show'. Either include it or remove the dependency array. You can also do a functional update 'setShow(s => ...)' if you only need 'show' in the 'setShow' call.",["186"],"'Container' is defined but never used.",{"desc":"187","fix":"188"},{"desc":"189","fix":"190"},{"desc":"191","fix":"192"},{"desc":"193","fix":"194"},{"desc":"195","fix":"196"},"Update the dependencies array to be: [props, startDate]",{"range":"197","text":"198"},"Update the dependencies array to be: [currentEvent, props]",{"range":"199","text":"200"},"Update the dependencies array to be: [props.eventInFocus._id, props.user]",{"range":"201","text":"202"},"Update the dependencies array to be: [Username, displayedUser.about, displayedUser.firstName, displayedUser.lastName]",{"range":"203","text":"204"},"Update the dependencies array to be: [props.showWarning, show]",{"range":"205","text":"206"},[405,416],"[props, startDate]",[2110,2124],"[currentEvent, props]",[2757,2769],"[props.eventInFocus._id, props.user]",[1432,1442],"[Username, displayedUser.about, displayedUser.firstName, displayedUser.lastName]",[537,556],"[props.showWarning, show]"]